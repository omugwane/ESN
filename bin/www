#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('s20-esn-rw1:server');
const http = require('http');
const BroadcastAPI = require('../lib/BroadcastAPI');

/**
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || 3000;

// console.log("process.env.PORT ",port)

// app.set('port', port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Setting up Socket.io server
 */
const io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Registering the API for sending dynamic data to clients with Socket.io
 */
// chatBroadcaster.setChannel(io)

BroadcastAPI.setUpChannel(io);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}